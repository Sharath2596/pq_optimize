let
    Source = Folder.Files("C:\Users\8216609\OneDrive - Standard Chartered Bank\Desktop\PB_Survey\2025\Qual\Apr"),
    #"Filtered Hidden Files1" = Table.SelectRows(Source, each [Attributes]?[Hidden]? <> true),
    
    // Apply transformation only once and reduce columns early
    #"Transform Data" = Table.AddColumn(#"Filtered Hidden Files1", "Data", each #"Transform File"([Content])),
    #"Expanded Data" = Table.ExpandTableColumn(#"Transform Data", "Data", Table.ColumnNames(#"Transform File"(#"Sample File"))),
    
    // Combine and clean up before heavy steps
    #"Added Source Name" = Table.AddColumn(#"Expanded Data", "Source.Name", each [Name]),
    #"Changed Types" = Table.TransformColumnTypes(#"Added Source Name", {
        {"Source.Name", type text}, {"CallDate", type date}, {"CallTime", type datetime}, {"CustomerID", type text},
        {"CustomerIDTxt", type text}, {"ProductType", type text}, {"AgentID", Int64.Type}, {"PrimaryCallType", type text},
        {"SecondaryCallType", type text}, {"CallType", type text}, {"ConnectionID", Int64.Type}, {"Duration", Int64.Type},
        {"LOB", type text}, {"SupervisorID", Int64.Type}, {"ManagerID", Int64.Type}, {"CallActivityLog", Int64.Type},
        {"Email", type any}, {"Segment", type text}, {"First Name", type text}, {"CallMonth", type text}, {"CallYear", Int64.Type}
    }),

    // Combine Changed Types with RealTime early
    #"Appended Query" = Table.Combine({#"Changed Types", #"RealTime"}),

    // Remove unnecessary columns ASAP
    #"Removed RMN" = Table.RemoveColumns(#"Appended Query",{"RMN"}),

    // Convert AgentID to text before join
    #"AgentID to Text" = Table.TransformColumnTypes(#"Removed RMN",{{"AgentID", type text}}),

    // Use Table.Buffer if "Team List" is small and static
    BufferedTeamList = Table.Buffer(#"Team List"),
    #"Joined with Team List" = Table.NestedJoin(#"AgentID to Text", {"AgentID"}, BufferedTeamList, {"logid"}, "Team List", JoinKind.LeftOuter),
    #"Expanded Team List" = Table.ExpandTableColumn(#"Joined with Team List", "Team List", {"logid", "Emp Name", "Team Leader", "Manager", "Affluent", "Location"}),

    // Convert CallActivityLog to text before join
    #"CallActivityLog to Text" = Table.TransformColumnTypes(#"Expanded Team List",{{"CallActivityLog", type text}}),

    BufferedResponse = Table.Buffer(Response),
    #"Joined with Response" = Table.NestedJoin(#"CallActivityLog to Text", {"CallActivityLog"}, BufferedResponse, {"CallActivityLog"}, "Response", JoinKind.LeftOuter),
    #"Expanded Response" = Table.ExpandTableColumn(#"Joined with Response", "Response", {"Response Type", "Officer CSAT", "(Group) Q4_NPS_GROUP", "NPS", "Query Resolution", "FCR"}),

    #"Removed Duplicates" = Table.Distinct(#"Expanded Response", {"CallActivityLog"}),
    #"Replace Null with No Response" = Table.ReplaceValue(#"Removed Duplicates", null, "No Response", Replacer.ReplaceValue, {"(Group) Q4_NPS_GROUP"}),

    // Clean and transform
    #"Filtered CallMonth" = Table.SelectRows(#"Replace Null with No Response", each [CallMonth] <> "Mar" and [CallMonth] <> "3"),

    // Add Survey trigger
    #"Add Survey Trigger" = Table.AddColumn(#"Filtered CallMonth", "Survey trigger types", each 
        if Text.Contains([CallType], "Survey POC") then "Real Time" 
        else if List.MatchesAny(Text.ToList([CallMonth]), each Text.Select(_, {"0".."9"}) <> "") then "NRMN" 
        else "RMN"),

    // Normalize Segment in one go
    SegmentsToReplace = {
        {"(blank)", "Personal"},
        {"Premium Banking", "Premium"},
        {"Personal Banking", "Personal"},
        {"Priority Banking", "Priority"},
        {"Business Banking", "Business"}
    },
    #"Normalized Segment" = List.Accumulate(SegmentsToReplace, #"Add Survey Trigger", (state, current) => 
        Table.ReplaceValue(state, current{0}, current{1}, Replacer.ReplaceText, {"Segment"})
    ),

    // Add Final FCR
    #"Add Final FCR" = Table.AddColumn(#"Normalized Segment", "Final FCR", each if [Query Resolution] = "Yes" and [FCR] = "Yes" then "Yes" else "No", type text),

    // Filter valid dates only
    #"Filtered NonNull Dates" = Table.SelectRows(#"Add Final FCR", each ([CallDate] <> null)),

    // Add Week of Month info and cleanup
    #"Add Week Columns" = Table.AddColumn(#"Filtered NonNull Dates", "Weekly", each 
        let week = Date.WeekOfMonth([CallDate]) 
        in "Week " & Text.From(if week > 4 then 4 else week)
    ),

    #"Removed Unnecessary Columns" = Table.RemoveColumns(#"Add Week Columns",{"Source.Name"})

in
    #"Removed Unnecessary Columns"
